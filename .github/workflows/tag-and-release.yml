# When run:
# * runs tests to ensure that released version works.
# * tags a new release based on main top of tree.
# * builds a source bundle and uploads it into the release
# * builds binaries and uploads them into the release
#
# The workflow can be run manually, otherwise it runs once a week.
name: Tag and Release

env:
  # The env here is tailored to releasing *one* binary.
  # ZIP_PACKAGE is the package where the zip target is. For //test in this
  # example, the label of the bazel target that zips up a built and released
  # binary is `//test:zip`.
  ZIP_PACKAGE: "//cmd/xrootfs"
  # The name of the binary to package. This workflow packages a single binary
  # into a zip file.
  BINARY_NAME: "bazel-bin/cmd/xrootfs/xrootfs"

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Setup bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v4
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-bazel-
      - name: "Test"
        run: "bazel test --test_output=errors //..."
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          generateReleaseNotes: true
      - name: Get release tag
        id: get_version
        run: echo "VERSION=${{ steps.tag_version.outputs.new_tag }}" >> $GITHUB_ENV
      - name: Get repo name
        id: get_repo_name
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
      - name: "Publish source archive"
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: 'zip'
          filename: "${{ env.REPO_NAME }}-${{ env.VERSION }}.zip"
          exclusions: '*.git* /*node_modules/* .editorconfig /bazel-*'
      - name: "Upload source archive"
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          allowUpdates: true
          artifacts: "${{ env.REPO_NAME }}-${{ env.VERSION }}.zip"

  release:
    needs: tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["386", "amd64"]
        os: ["linux"]
    steps:
      - name: Setup bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v4
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-${{ matrix.arch }}-bazel-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-bazel-
      - name: "Test"
        run: "bazel test --test_output=errors //..."
      - name: "Build binaries for ${{ matrix.os }}_${{ matrix.arch }}"
        run: |
          bazel build \
            --platforms=@rules_go//go/toolchain:${{ matrix.os }}_${{ matrix.arch}} \
            --${ZIP_PACKAGE}:name_part_from_command_line=${{ matrix.os }}-${{ matrix.arch }} \
            ${ZIP_PACKAGE}:zip
      - name: Find version tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          dry_run: true
      - name: "Publish ${{ matrix.os }}_${{ matrix.arch }}"
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allowUpdates: true
          artifacts: "${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.zip"
          tag: ${{ steps.tag_version.outputs.previous_tag }}

